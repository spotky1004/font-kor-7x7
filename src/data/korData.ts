export type ShapeTypes = "c2" | "c3" | "c5" | "v1" | "v2" | "v3" | "h1" | "h2";
type CharShape =
  `${ShapeTypes}` |
  `${ShapeTypes}${ShapeTypes}` |
  `${ShapeTypes}${ShapeTypes}${ShapeTypes}` |
  `${ShapeTypes}${ShapeTypes}${ShapeTypes}${ShapeTypes}` |
  `${ShapeTypes}${ShapeTypes}${ShapeTypes}${ShapeTypes}${ShapeTypes}`;
const vaildCharShapes = [
  "c2", "c3", "c5", "v1", "v2", "v3", "h1", "h2", "c2c3", "c3c2", "c3c3",
  "c2v1", "c3v1", "c5v1", "c2v2", "c3v2", "c5v2", "c2v3", "c3v3", "c5v3",
  "c2h1", "c3h1", "c5h1", "c2h2", "c3h2", "c5h2",
  "c2h1v1", "c2h2v1", "c2h2v2", "c2h2v3", "c3h1v1", "c3h2v1", "c3h2v2", "c3h2v3", "c5h1v1", "c5h2v1", "c5h2v2", "c5h2v3",
  "c2v1c2", "c2v1c3", "c2v1c5", "c2v1c2c3", "c2v1c3c2", "c2v1c3c3", "c2v2c2", "c2v2c3", "c2v2c5", "c2v2c2c3", "c2v2c3c2", "c2v2c3c3", "c2v3c2", "c2v3c3", "c2v3c5", "c2v3c2c3", "c2v3c3c2", "c2v3c3c3",
  "c3v1c2", "c3v1c3", "c3v1c5", "c3v1c2c3", "c3v1c3c2", "c3v1c3c3", "c3v2c2", "c3v2c3", "c3v2c5", "c3v2c2c3", "c3v2c3c2", "c3v2c3c3", "c3v3c2", "c3v3c3", "c3v3c5", "c3v3c2c3", "c3v3c3c2", "c3v3c3c3",
  "c5v1c2", "c5v1c3", "c5v1c5", "c5v1c2c3", "c5v1c3c2", "c5v1c3c3", "c5v2c2", "c5v2c3", "c5v2c5", "c5v2c2c3", "c5v2c3c2", "c5v2c3c3", "c5v3c2", "c5v3c3", "c5v3c5", "c5v3c2c3", "c5v3c3c2", "c5v3c3c3",
  "c2h1c2", "c2h1c3", "c2h1c5", "c2h1c2c3", "c2h1c3c2", "c2h1c3c3", "c2h2c2", "c2h2c5", "c2h2c3", "c2h2c2c3", "c2h2c3c2", "c2h2c3c3",
  "c3h1c2", "c3h1c3", "c3h1c5", "c3h1c2c3", "c3h1c3c2", "c3h1c3c3", "c3h2c2", "c3h2c3", "c3h2c5", "c3h2c2c3", "c3h2c3c2", "c3h2c3c3",
  "c5h1c2", "c5h1c3", "c5h1c5", "c5h1c2c3", "c5h1c3c2", "c5h1c3c3", "c5h2c2", "c5h2c3", "c5h2c5", "c5h2c2c3", "c5h2c3c2", "c5h2c3c3",
] as const;
type VaildCharShapes = Extract<
  CharShape,
  typeof vaildCharShapes[number]
>;
type PixelPos = `${number}_${number}`;
const koreanAlphabets = [
  "ㄱ", "ㄴ", "ㄷ", "ㄹ", "ㅁ", "ㅂ", "ㅅ", "ㅇ", "ㅈ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ",
  "ㅏ", "ㅑ", "ㅓ", "ㅕ", "ㅗ", "ㅛ", "ㅜ", "ㅠ", "ㅡ", "ㅣ", "ㅐ", "ㅒ", "ㅔ", "ㅖ",
  "ㄲ", "ㄸ", "ㅃ", "ㅆ", "ㅉ"
] as const;
type KoreanAlphabet = typeof koreanAlphabets[number];

const alphabetData: { [K in KoreanAlphabet]: Map<`${number}_${number}`, [number, number][]> } = {} as any;
for (const alphabet of koreanAlphabets) {
  alphabetData[alphabet] = new Map();
}
const data: { [K in typeof vaildCharShapes[number]]: Map<`${number}_${KoreanAlphabet}`, [number, number][]> } = {} as any;
for (const vaildCharShape of vaildCharShapes) {
  data[vaildCharShape] = new Map();
}

function addAlphabetData(alphabet: KoreanAlphabet, width: number, height: number, pixelPositions: PixelPos[]) {
  const shapeData = alphabetData[alphabet];
  const pixels = pixelPositions.map(pixel => pixel.split("_").map(pos => +pos) as [number, number]);
  // const [xFrom, xTo] = pixels.reduce(([from, to], pixel) => [Math.min(from, pixel[0]), Math.max(to, pixel[0])], [Infinity, -Infinity]);
  // const [yFrom, yTo] = pixels.reduce(([from, to], pixel) => [Math.min(from, pixel[1]), Math.max(to, pixel[1])], [Infinity, -Infinity]);
  // const width = xTo-xFrom+1;
  // const height = yTo-yFrom+1;
  if (!shapeData) return;
  shapeData.set(
    `${width}_${height}`,
    pixels
  );
}
function addDatas(shapes: VaildCharShapes[], pos: number, xOffset: number, yOffset: number, width: number, height: number) {
  for (const shape of shapes) {
    if (!(shape in data)) {
      return;
    }
    const shapeData = data[shape];
    if (!shapeData) return;
    for (const alphabet of koreanAlphabets) {
      const key: `${number}_${KoreanAlphabet}` = `${pos}_${alphabet}`;
      if (shapeData.has(key)) continue;
      const pixelPositions = alphabetData[alphabet].get(`${width}_${height}`);
      if (!pixelPositions) continue;
      const shiftedPixels = pixelPositions.map(([x, y]) => `${Math.min(7, x+xOffset)}_${Math.min(7, y+yOffset)}` as `${number}_${number}`);
      addData(shape, pos, alphabet, shiftedPixels);
    }
  }
}
function addData(shape: VaildCharShapes, pos: number, alphabet: KoreanAlphabet, pixels: PixelPos[]) {
  if (!(shape in data)) {
    data[shape] = new Map();
  }
  const shapeData = data[shape];
  if (!shapeData) return;
  const key: `${number}_${KoreanAlphabet}` = `${pos}_${alphabet}`;
  shapeData.set(
    key,
    pixels.map(pixel => pixel.split("_").map(pos => +pos) as [number, number])
  );
}

// addAlphabetData
(() => {
  // ㄱ
  addAlphabetData("ㄱ", 2, 2, ["1_1", "2_1", "2_2"]);
  addAlphabetData("ㄱ", 3, 2, ["1_1", "2_1", "3_1", "3_2"]);
  addAlphabetData("ㄱ", 3, 3, ["1_1", "2_1", "3_1", "3_2", "3_3"]);
  addAlphabetData("ㄱ", 3, 4, ["1_1", "2_1", "3_1", "3_2", "3_3", "3_4"]);
  addAlphabetData("ㄱ", 3, 5, ["1_1", "2_1", "3_1", "3_2", "3_3", "3_4", "3_5"]);
  addAlphabetData("ㄱ", 4, 2, ["1_1", "2_1", "3_1", "4_1", "4_2"]);
  addAlphabetData("ㄱ", 4, 3, ["1_1", "2_1", "3_1", "4_1", "4_2", "4_3"]);
  addAlphabetData("ㄱ", 4, 4, ["1_1", "2_1", "3_1", "4_1", "4_2", "4_3", "4_4"]);
  addAlphabetData("ㄱ", 4, 5, ["1_1", "2_1", "3_1", "4_1", "4_2", "4_3", "4_4", "4_5"]);
  addAlphabetData("ㄱ", 5, 2, ["1_1", "2_1", "3_1", "4_1", "5_1", "5_2"]);
  addAlphabetData("ㄱ", 5, 3, ["1_1", "2_1", "3_1", "4_1", "5_1", "5_2", "5_3"]);
  addAlphabetData("ㄱ", 5, 4, ["1_1", "2_1", "3_1", "4_1", "5_1", "5_2", "5_3", "5_4"]);
  addAlphabetData("ㄱ", 5, 5, ["1_1", "2_1", "3_1", "4_1", "5_1", "5_2", "5_3", "5_4", "5_5"]);
  addAlphabetData("ㄱ", 3, 7, ["1_1", "2_1", "3_1", "3_2", "3_3", "3_4", "3_5", "3_6", "3_7"]);
  addAlphabetData("ㄱ", 4, 7, ["1_1", "2_1", "3_1", "4_1", "4_2", "4_3", "4_4", "4_5", "4_6", "4_7"]);
  addAlphabetData("ㄱ", 5, 7, ["1_1", "2_1", "3_1", "4_1", "5_1", "5_2", "5_3", "5_4", "5_5", "5_6", "5_7"]);
  // ㄴ
  addAlphabetData("ㄴ", 2, 2, ["1_1", "1_2", "2_2"]);
  addAlphabetData("ㄴ", 3, 2, ["1_1", "1_2", "2_2", "3_2"]);
  addAlphabetData("ㄴ", 3, 3, ["1_1", "1_2", "1_3", "2_3", "3_3"]);
  addAlphabetData("ㄴ", 3, 4, ["1_1", "1_2", "1_3", "1_4", "2_4", "3_4"]);
  addAlphabetData("ㄴ", 3, 5, ["1_1", "1_2", "1_3", "1_4", "1_5", "2_5", "3_5"]);
  addAlphabetData("ㄴ", 4, 2, ["1_1", "1_2", "2_2", "3_2", "4_2"]);
  addAlphabetData("ㄴ", 4, 3, ["1_1", "1_2", "1_3", "2_3", "3_3", "4_3"]);
  addAlphabetData("ㄴ", 4, 4, ["1_1", "1_2", "1_3", "1_4", "2_4", "3_4", "4_4"]);
  addAlphabetData("ㄴ", 4, 5, ["1_1", "1_2", "1_3", "1_4", "1_5", "2_5", "3_5", "4_5"]);
  addAlphabetData("ㄴ", 5, 2, ["1_1", "1_2", "2_2", "3_2", "4_2", "5_2"]);
  addAlphabetData("ㄴ", 5, 3, ["1_1", "1_2", "1_3", "2_3", "3_3", "4_3", "5_3"]);
  addAlphabetData("ㄴ", 5, 4, ["1_1", "1_2", "1_3", "1_4", "2_4", "3_4", "4_4", "5_4"]);
  addAlphabetData("ㄴ", 5, 5, ["1_1", "1_2", "1_3", "1_4", "1_5", "2_5", "3_5", "4_5", "5_5"]);
  addAlphabetData("ㄴ", 3, 7, ["1_1", "1_2", "1_3", "1_4", "1_5", "1_6", "1_7", "2_7", "3_7"]);
  addAlphabetData("ㄴ", 4, 7, ["1_1", "1_2", "1_3", "1_4", "1_5", "1_6", "1_7", "2_7", "3_7", "4_7"]);
  addAlphabetData("ㄴ", 5, 7, ["1_1", "1_2", "1_3", "1_4", "1_5", "1_6", "1_7", "2_7", "3_7", "4_7", "5_7"]);
  // ㄷ
  addAlphabetData("ㄷ", 3, 3, ["1_1", "2_1", "3_1", "1_2", "1_3", "2_3", "3_3"]);
  addAlphabetData("ㄷ", 3, 4, ["1_1", "2_1", "3_1", "1_2", "1_3", "1_4", "2_4", "3_4"]);
  addAlphabetData("ㄷ", 3, 5, ["1_1", "2_1", "3_1", "1_2", "1_3", "1_4", "1_5", "2_5", "3_5"]);
  addAlphabetData("ㄷ", 4, 3, ["1_1", "2_1", "3_1", "4_1", "1_2", "1_3", "2_3", "3_3", "4_3"]);
  addAlphabetData("ㄷ", 4, 4, ["1_1", "2_1", "3_1", "4_1", "1_2", "1_3", "1_4", "2_4", "3_4", "4_4"]);
  addAlphabetData("ㄷ", 4, 5, ["1_1", "2_1", "3_1", "4_1", "1_2", "1_3", "1_4", "1_5", "2_5", "3_5", "4_5"]);
  addAlphabetData("ㄷ", 5, 3, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "1_3", "2_3", "3_3", "4_3", "5_3"]);
  addAlphabetData("ㄷ", 5, 4, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "1_3", "1_4", "2_4", "3_4", "4_4", "5_4"]);
  addAlphabetData("ㄷ", 5, 5, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "1_3", "1_4", "1_5", "2_5", "3_5", "4_5", "5_5"]);
  addAlphabetData("ㄷ", 3, 7, ["1_1", "2_1", "3_1", "1_2", "1_3", "1_4", "1_5", "1_6", "1_7", "2_7", "3_7"]);
  addAlphabetData("ㄷ", 4, 7, ["1_1", "2_1", "3_1", "4_1", "1_2", "1_3", "1_4", "1_5", "1_6", "1_7", "2_7", "3_7", "4_7"]);
  addAlphabetData("ㄷ", 5, 7, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "1_3", "1_4", "1_5", "1_6", "1_7", "2_7", "3_7", "4_7", "5_7"]);
  // ㄹ
  addAlphabetData("ㄹ", 3, 3, ["1_1", "2_1", "2_2", "2_3", "3_3"]);
  addAlphabetData("ㄹ", 3, 4, ["1_1", "2_1", "3_1", "3_2", "1_3", "2_3", "1_4", "2_4", "3_4"]);
  addAlphabetData("ㄹ", 3, 5, ["1_1", "2_1", "3_1", "3_2", "1_3", "2_3", "3_3", "1_4", "1_5", "2_5", "3_5"]);
  addAlphabetData("ㄹ", 4, 3, ["1_1", "2_1", "3_1", "3_2", "3_3", "4_3"]);
  addAlphabetData("ㄹ", 4, 4, ["1_1", "2_1", "3_1", "4_1", "3_2", "4_2", "1_3", "2_3", "1_4", "2_4", "3_4", "4_4"]);
  addAlphabetData("ㄹ", 4, 5, ["1_1", "2_1", "3_1", "4_1", "4_2", "1_3", "2_3", "3_3", "4_3", "1_4", "1_5", "2_5", "3_5", "4_5"]);
  addAlphabetData("ㄹ", 5, 3, ["1_1", "2_1", "3_1", "3_2", "3_3", "4_3", "5_3"]);
  addAlphabetData("ㄹ", 5, 4, ["1_1", "2_1", "3_1", "4_1", "5_1", "4_2", "5_2", "1_3", "2_3", "3_3", "1_4", "2_4", "3_4", "4_4", "5_4"]);
  addAlphabetData("ㄹ", 5, 5, ["1_1", "2_1", "3_1", "4_1", "5_1", "5_2", "1_3", "2_3", "3_3", "4_3", "5_3", "1_4", "1_5", "2_5", "3_5", "4_5", "5_5"]);
  addAlphabetData("ㄹ", 3, 7, ["1_1", "2_1", "3_1", "3_2", "3_3", "1_4", "2_4", "3_4", "1_5", "1_6", "1_7", "2_7", "3_7"]);
  addAlphabetData("ㄹ", 4, 7, ["1_1", "2_1", "3_1", "4_1", "4_2", "4_3", "1_4", "2_4", "3_4", "4_4", "1_5", "1_6", "1_7", "2_7", "3_7", "4_7"]);
  addAlphabetData("ㄹ", 5, 7, ["1_1", "2_1", "3_1", "4_1", "5_1", "5_2", "5_3", "1_4", "2_4", "3_4", "4_4", "5_4", "1_5", "1_6", "1_7", "2_7", "3_7", "4_7", "5_7"]);
  // ㅁ
  addAlphabetData("ㅁ", 3, 3, ["1_1", "2_1", "3_1", "1_2", "3_2", "1_3", "2_3", "3_3"]);
  addAlphabetData("ㅁ", 3, 4, ["1_1", "2_1", "3_1", "1_2", "3_2", "1_3", "3_3", "1_4", "2_4", "3_4"]);
  addAlphabetData("ㅁ", 3, 5, ["1_1", "2_1", "3_1", "1_2", "3_2", "1_3", "3_3", "1_4", "3_4", "1_5", "2_5", "3_5"]);
  addAlphabetData("ㅁ", 4, 3, ["1_1", "2_1", "3_1", "4_1", "1_2", "4_2", "1_3", "2_3", "3_3", "4_3"]);
  addAlphabetData("ㅁ", 4, 4, ["1_1", "2_1", "3_1", "4_1", "1_2", "4_2", "1_3", "4_3", "1_4", "2_4", "3_4", "4_4"]);
  addAlphabetData("ㅁ", 4, 5, ["1_1", "2_1", "3_1", "4_1", "1_2", "4_2", "1_3", "4_3", "1_4", "4_4", "1_5", "2_5", "3_5", "4_5"]);
  addAlphabetData("ㅁ", 5, 3, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "5_2", "1_3", "2_3", "3_3", "4_3", "5_3"]);
  addAlphabetData("ㅁ", 5, 4, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "5_2", "1_3", "5_3", "1_4", "2_4", "3_4", "4_4", "5_4"]);
  addAlphabetData("ㅁ", 5, 5, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "5_2", "1_3", "5_3", "1_4", "5_4", "1_5", "2_5", "3_5", "4_5", "5_5"]);
  addAlphabetData("ㅁ", 3, 7, ["1_1", "2_1", "3_1", "1_2", "3_2", "1_3", "3_3", "1_4", "3_4", "1_5", "3_5", "1_6", "3_6", "1_7", "2_7", "3_7"]);
  addAlphabetData("ㅁ", 4, 7, ["1_1", "2_1", "3_1", "4_1", "1_2", "4_2", "1_3", "4_3", "1_4", "4_4", "1_5", "4_5", "1_6", "4_6", "1_7", "2_7", "3_7", "4_7"]);
  addAlphabetData("ㅁ", 5, 7, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "5_2", "1_3", "5_3", "1_4", "5_4", "1_5", "5_5", "1_6", "5_6", "1_7", "2_7", "3_7", "4_7", "5_7"]);
  // ㅂ
  addAlphabetData("ㅂ", 3, 3, ["1_1", "3_1", "1_2", "2_2", "3_2", "1_3", "2_3", "3_3"]);
  addAlphabetData("ㅂ", 3, 4, ["1_1", "3_1", "1_2", "2_2", "3_2", "1_3", "3_3", "1_4", "2_4", "3_4"]);
  addAlphabetData("ㅂ", 3, 5, ["1_1", "3_1", "1_2", "3_2", "1_3", "2_3", "3_3", "1_4", "3_4", "1_5", "2_5", "3_5"]);
  addAlphabetData("ㅂ", 4, 3, ["1_1", "4_1", "1_2", "2_2", "3_2", "4_2", "1_3", "2_3", "3_3", "4_3"]);
  addAlphabetData("ㅂ", 4, 4, ["1_1", "4_1", "1_2", "2_2", "3_2", "4_2", "1_3", "4_3", "1_4", "2_4", "3_4", "4_4"]);
  addAlphabetData("ㅂ", 4, 5, ["1_1", "4_1", "1_2", "4_2", "1_3", "2_3", "3_3", "4_3", "1_4", "4_4", "1_5", "2_5", "3_5", "4_5"]);
  addAlphabetData("ㅂ", 5, 3, ["1_1", "5_1", "1_2", "2_2", "3_2", "4_2", "5_2", "1_3", "2_3", "3_3", "4_3", "5_3"]);
  addAlphabetData("ㅂ", 5, 4, ["1_1", "5_1", "1_2", "2_2", "3_2", "4_2", "5_2", "1_3", "5_3", "1_4", "2_4", "3_4", "4_4", "5_4"]);
  addAlphabetData("ㅂ", 5, 5, ["1_1", "5_1", "1_2", "2_2", "3_2", "4_2", "5_2", "1_3", "5_3", "1_4", "5_4", "1_5", "2_5", "3_5", "4_5", "5_5"]);
  addAlphabetData("ㅂ", 3, 7, ["1_1", "3_1", "1_2", "3_2", "1_3", "2_3", "3_3", "1_4", "3_4", "1_5", "3_5", "1_6", "3_6", "1_7", "2_7", "3_7"]);
  addAlphabetData("ㅂ", 4, 7, ["1_1", "4_1", "1_2", "4_2", "1_3", "2_3", "3_3", "4_3", "1_4", "4_4", "1_5", "4_5", "1_6", "4_6", "1_7", "2_7", "3_7", "4_7"]);
  addAlphabetData("ㅂ", 5, 7, ["1_1", "5_1", "1_2", "5_2", "1_3", "2_3", "3_3", "4_3", "5_3", "1_4", "5_4", "1_5", "5_5", "1_6", "5_6", "1_7", "2_7", "3_7", "4_7", "5_7"]);
  // ㅅ
  addAlphabetData("ㅅ", 3, 3, ["1_1", "1_2", "2_2", "1_3", "3_3"]);
  addAlphabetData("ㅅ", 3, 4, ["1_1", "1_2", "2_2", "1_3", "3_3", "1_4", "3_4"]);
  addAlphabetData("ㅅ", 3, 5, ["1_1", "1_2", "2_2", "1_3", "2_3", "1_4", "3_4", "1_5", "3_5"]);
  addAlphabetData("ㅅ", 4, 3, ["1_1", "1_2", "2_2", "3_2", "1_3", "4_3"]);
  addAlphabetData("ㅅ", 4, 4, ["1_1", "1_2", "2_2", "1_3", "3_3", "1_4", "4_4"]);
  addAlphabetData("ㅅ", 4, 5, ["1_1", "1_2", "2_2", "1_3", "3_3", "1_4", "4_4", "1_5", "4_5"]);
  addAlphabetData("ㅅ", 5, 3, ["1_1", "1_2", "2_2", "3_2", "4_2", "1_3", "5_3"]);
  addAlphabetData("ㅅ", 5, 4, ["1_1", "1_2", "2_2", "3_2", "1_3", "4_3", "1_4", "5_4"]);
  addAlphabetData("ㅅ", 5, 5, ["1_1", "1_2", "2_2", "1_3", "3_3", "1_4", "4_4", "1_5", "5_5"]);
  addAlphabetData("ㅅ", 3, 7, ["1_1", "1_2", "1_3", "2_3", "1_4", "2_4", "1_5", "3_5", "1_6", "3_6", "1_7", "3_7"]);
  addAlphabetData("ㅅ", 4, 7, ["1_1", "1_2", "2_2", "1_3", "2_3", "1_4", "3_4", "1_5", "3_5", "1_6", "4_6", "1_7", "4_7"]);
  addAlphabetData("ㅅ", 5, 7, ["1_1", "1_2", "2_2", "1_3", "2_3", "1_4", "3_4", "1_5", "4_5", "1_6", "4_6", "1_7", "5_7"]);
  // ㅇ
  addAlphabetData("ㅇ", 3, 3, ["2_1", "1_2", "3_2", "2_3"]);
  addAlphabetData("ㅇ", 3, 4, ["2_1", "1_2", "3_2", "1_3", "3_3", "2_4"]);
  addAlphabetData("ㅇ", 3, 5, ["2_1", "1_2", "3_2", "1_3", "3_3", "1_4", "3_4", "2_5"]);
  addAlphabetData("ㅇ", 4, 3, ["2_1", "3_1", "1_2", "4_2", "2_3", "3_3"]);
  addAlphabetData("ㅇ", 4, 4, ["2_1", "3_1", "1_2", "4_2", "1_3", "4_3", "2_4", "3_4"]);
  addAlphabetData("ㅇ", 4, 5, ["2_1", "3_1", "1_2", "4_2", "1_3", "4_3", "1_4", "4_4", "2_5", "3_5"]);
  addAlphabetData("ㅇ", 5, 3, ["2_1", "3_1", "4_1", "1_2", "5_2", "2_3", "3_3", "4_3"]);
  addAlphabetData("ㅇ", 5, 4, ["2_1", "3_1", "4_1", "1_2", "5_2", "1_3", "5_3", "2_4", "3_4", "4_4"]);
  addAlphabetData("ㅇ", 5, 5, ["2_1", "3_1", "4_1", "1_2", "5_2", "1_3", "5_3", "1_4", "5_4", "2_5", "3_5", "4_5"]);
  addAlphabetData("ㅇ", 3, 7, ["2_1", "1_2", "3_2", "1_3", "3_3", "1_4", "3_4", "1_5", "3_5", "1_6", "3_6", "2_7"]);
  addAlphabetData("ㅇ", 4, 7, ["2_1", "3_1", "1_2", "4_2", "1_3", "4_3", "1_4", "4_4", "1_5", "4_5", "1_6", "4_6", "2_7", "3_7"]);
  addAlphabetData("ㅇ", 5, 7, ["2_1", "3_1", "4_1", "1_2", "5_2", "1_3", "5_3", "1_4", "5_4", "1_5", "5_5", "1_6", "5_6", "2_7", "3_7", "4_7"]);
  // ㅈ
  addAlphabetData("ㅈ", 3, 3, ["1_1", "2_1", "3_1", "2_2", "1_3", "3_3"]);
  addAlphabetData("ㅈ", 3, 4, ["1_1", "2_1", "3_1", "2_2", "1_3", "3_3", "1_4", "3_4"]);
  addAlphabetData("ㅈ", 3, 5, ["1_1", "2_1", "3_1", "2_2", "2_3", "1_4", "3_4", "1_5", "3_5"]);
  addAlphabetData("ㅈ", 4, 3, ["1_1", "2_1", "3_1", "4_1", "2_2", "3_2", "1_3", "4_3"]);
  addAlphabetData("ㅈ", 4, 4, ["1_1", "2_1", "3_1", "4_1", "2_2", "1_3", "3_3", "1_4", "4_4"]);
  addAlphabetData("ㅈ", 4, 5, ["1_1", "2_1", "3_1", "4_1", "2_2", "1_3", "3_3", "1_4", "4_4", "1_5", "4_5"]);
  addAlphabetData("ㅈ", 5, 3, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "3_2", "1_3", "4_3", "5_3"]);
  addAlphabetData("ㅈ", 5, 4, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "1_3", "3_3", "4_3", "1_4", "5_4"]);
  addAlphabetData("ㅈ", 5, 5, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "1_3", "3_3", "1_4", "4_4", "1_5", "5_5"]);
  addAlphabetData("ㅈ", 3, 7, ["1_1", "2_1", "3_1", "2_2", "2_3", "1_4", "3_4", "1_5", "3_5", "1_6", "3_6", "1_7", "3_7"]);
  addAlphabetData("ㅈ", 4, 7, ["1_1", "2_1", "3_1", "4_1", "2_2", "1_3", "3_3", "1_4", "4_4", "1_5", "4_5", "1_6", "4_6", "1_7", "4_7"]);
  addAlphabetData("ㅈ", 5, 7, ["1_1", "2_1", "3_1", "4_1", "5_1", "3_2", "3_3", "2_4", "4_4", "2_5", "4_5", "1_6", "5_6", "1_7", "5_7"]);
  // ㅊ
  addAlphabetData("ㅊ", 3, 3, ["2_1", "1_2", "2_2", "3_2", "1_3", "3_3"]);
  addAlphabetData("ㅊ", 3, 4, ["2_1", "1_2", "2_2", "3_2", "2_3", "1_4", "3_4"]);
  addAlphabetData("ㅊ", 3, 5, ["2_1", "1_2", "2_2", "3_2", "2_3", "1_4", "3_4", "1_5", "3_5"]);
  addAlphabetData("ㅊ", 4, 3, ["2_1", "1_2", "2_2", "3_2", "2_3", "4_3"]);
  addAlphabetData("ㅊ", 4, 4, ["2_1", "1_2", "2_2", "3_2", "4_2", "2_3", "3_3", "1_4", "4_4"]);
  addAlphabetData("ㅊ", 4, 5, ["2_1", "1_2", "2_2", "3_2", "4_2", "2_3", "1_4", "3_4", "1_5", "4_5"]);
  addAlphabetData("ㅊ", 5, 3, ["2_1", "1_2", "2_2", "3_2", "4_2", "2_3", "5_3"]);
  addAlphabetData("ㅊ", 5, 4, ["2_1", "1_2", "2_2", "3_2", "4_2", "5_2", "2_3", "3_3", "1_4", "4_4", "5_4"]);
  addAlphabetData("ㅊ", 5, 5, ["3_1", "1_2", "2_2", "3_2", "4_2", "5_2", "3_3", "2_4", "4_4", "1_5", "5_5"]);
  addAlphabetData("ㅊ", 3, 7, ["2_1", "1_2", "2_2", "3_2", "2_3", "2_4", "1_5", "3_5", "1_6", "3_6", "1_7", "3_7"]);
  addAlphabetData("ㅊ", 4, 7, ["2_1", "1_2", "2_2", "3_2", "4_2", "2_3", "1_4", "3_4", "1_5", "4_5", "1_6", "4_6", "1_7", "4_7"]);
  addAlphabetData("ㅊ", 5, 7, ["3_1", "1_2", "2_2", "3_2", "4_2", "5_2", "3_3", "2_4", "4_4", "2_5", "4_5", "1_6", "5_6", "1_7", "5_7"]);
  // ㅋ
  addAlphabetData("ㅋ", 3, 3, ["1_1", "2_1", "3_1", "2_2", "3_2", "3_3"]);
  addAlphabetData("ㅋ", 3, 4, ["1_1", "2_1", "3_1", "3_2", "1_3", "2_3", "3_3", "3_4"]);
  addAlphabetData("ㅋ", 3, 5, ["1_1", "2_1", "3_1", "3_2", "1_3", "2_3", "3_3", "3_4", "3_5"]);
  addAlphabetData("ㅋ", 4, 3, ["1_1", "2_1", "3_1", "4_1", "2_2", "3_2", "4_2", "4_3"]);
  addAlphabetData("ㅋ", 4, 4, ["1_1", "2_1", "3_1", "4_1", "4_2", "1_3", "2_3", "3_3", "4_3", "4_4"]);
  addAlphabetData("ㅋ", 4, 5, ["1_1", "2_1", "3_1", "4_1", "4_2", "1_3", "2_3", "3_3", "4_3", "4_4", "4_5"]);
  addAlphabetData("ㅋ", 5, 3, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "3_2", "4_2", "5_2", "5_3"]);
  addAlphabetData("ㅋ", 5, 4, ["1_1", "2_1", "3_1", "4_1", "5_1", "5_2", "1_3", "2_3", "3_3", "4_3", "5_3", "5_4"]);
  addAlphabetData("ㅋ", 5, 5, ["1_1", "2_1", "3_1", "4_1", "5_1", "5_2", "1_3", "2_3", "3_3", "4_3", "5_3", "5_4", "5_5"]);
  addAlphabetData("ㅋ", 3, 7, ["1_1", "2_1", "3_1", "3_2", "3_3", "1_4", "2_4", "3_4", "3_5", "3_6", "3_7"]);
  addAlphabetData("ㅋ", 4, 7, ["1_1", "2_1", "3_1", "4_1", "4_2", "4_3", "1_4", "2_4", "3_4", "4_4", "4_5", "4_6", "4_7"]);
  addAlphabetData("ㅋ", 5, 7, ["1_1", "2_1", "3_1", "4_1", "5_1", "5_2", "5_3", "1_4", "2_4", "3_4", "4_4", "5_4", "5_5", "5_6", "5_7"]);
  // ㅌ
  addAlphabetData("ㅌ", 3, 3, ["1_1", "2_1", "3_1", "1_2", "2_2", "1_3", "2_3", "3_3"]);
  addAlphabetData("ㅌ", 3, 4, ["1_1", "2_1", "3_1", "1_2", "2_2", "1_3", "1_4", "2_4", "3_4"]);
  addAlphabetData("ㅌ", 3, 5, ["1_1", "2_1", "3_1", "1_2", "1_3", "2_3", "3_3", "1_4", "1_5", "2_5", "3_5"]);
  addAlphabetData("ㅌ", 4, 3, ["1_1", "2_1", "3_1", "4_1", "1_2", "2_2", "3_2", "1_3", "2_3", "3_3", "4_3"]);
  addAlphabetData("ㅌ", 4, 4, ["1_1", "2_1", "3_1", "4_1", "1_2", "2_2", "3_2", "1_3", "1_4", "2_4", "3_4", "4_4"]);
  addAlphabetData("ㅌ", 4, 5, ["1_1", "2_1", "3_1", "4_1", "1_2", "1_3", "2_3", "3_3", "4_3", "1_4", "1_5", "2_5", "3_5", "4_5"]);
  addAlphabetData("ㅌ", 5, 3, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "2_2", "3_2", "4_2", "1_3", "2_3", "3_3", "4_3", "5_3"]);
  addAlphabetData("ㅌ", 5, 4, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "2_2", "3_2", "4_2", "1_3", "1_4", "2_4", "3_4", "4_4", "5_4"]);
  addAlphabetData("ㅌ", 5, 5, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "1_3", "2_3", "3_3", "4_3", "5_3", "1_4", "1_5", "2_5", "3_5", "4_5", "5_5"]);
  addAlphabetData("ㅌ", 3, 7, ["1_1", "2_1", "3_1", "1_2", "1_3", "1_4", "2_4", "3_4", "1_5", "1_6", "1_7", "2_7", "3_7"]);
  addAlphabetData("ㅌ", 4, 7, ["1_1", "2_1", "3_1", "4_1", "1_2", "1_3", "1_4", "2_4", "3_4", "4_4", "1_5", "1_6", "1_7", "2_7", "3_7", "4_7"]);
  addAlphabetData("ㅌ", 5, 7, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "1_3", "1_4", "2_4", "3_4", "4_4", "5_4", "1_5", "1_6", "1_7", "2_7", "3_7", "4_7", "5_7"]);
  // ㅍ
  addAlphabetData("ㅍ", 3, 3, ["1_1", "2_1", "3_1", "2_2", "1_3", "2_3", "3_3"]);
  addAlphabetData("ㅍ", 3, 4, ["1_1", "2_1", "3_1", "2_2", "2_3", "1_4", "2_4", "3_4"]);
  addAlphabetData("ㅍ", 3, 5, ["1_1", "2_1", "3_1", "2_2", "2_3", "2_4", "1_5", "2_5", "3_5"]);
  addAlphabetData("ㅍ", 4, 3, ["1_1", "2_1", "3_1", "4_1", "2_2", "3_2", "1_3", "2_3", "3_3", "4_3"]);
  addAlphabetData("ㅍ", 4, 4, ["1_1", "2_1", "3_1", "4_1", "2_2", "3_2", "2_3", "3_3", "1_4", "2_4", "3_4", "4_4"]);
  addAlphabetData("ㅍ", 4, 5, ["1_1", "2_1", "3_1", "4_1", "2_2", "3_2", "2_3", "3_3", "2_4", "3_4", "1_5", "2_5", "3_5", "4_5"]);
  addAlphabetData("ㅍ", 5, 3, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "4_2", "1_3", "2_3", "3_3", "4_3", "5_3"]);
  addAlphabetData("ㅍ", 5, 4, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "4_2", "2_3", "4_3", "1_4", "2_4", "3_4", "4_4", "5_4"]);
  addAlphabetData("ㅍ", 5, 5, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "4_2", "2_3", "4_3", "2_4", "4_4", "1_5", "2_5", "3_5", "4_5", "5_5"]);
  addAlphabetData("ㅍ", 3, 7, ["1_1", "2_1", "3_1", "2_2", "2_3", "2_4", "2_5", "2_6", "1_7", "2_7", "3_7"]);
  addAlphabetData("ㅍ", 4, 7, ["1_1", "2_1", "3_1", "4_1", "2_2", "3_2", "2_3", "3_3", "2_4", "3_4", "2_5", "3_5", "2_6", "3_6", "1_7", "2_7", "3_7", "4_7"]);
  addAlphabetData("ㅍ", 5, 7, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "4_2", "2_3", "4_3", "2_4", "4_4", "2_5", "4_5", "2_6", "4_6", "1_7", "2_7", "3_7", "4_7", "5_7"]);
  // ㅎ
  addAlphabetData("ㅎ", 3, 3, ["2_1", "1_2", "2_2", "3_2", "1_3", "2_3", "3_3"]);
  addAlphabetData("ㅎ", 3, 4, ["2_1", "1_2", "2_2", "3_2", "1_3", "3_3", "2_4"]);
  addAlphabetData("ㅎ", 3, 5, ["2_1", "1_2", "2_2", "3_2", "2_3", "1_4", "3_4", "2_5"]);
  addAlphabetData("ㅎ", 4, 3, ["2_1", "1_2", "2_2", "3_2", "4_2", "2_3", "3_3"]);
  addAlphabetData("ㅎ", 4, 4, ["2_1", "1_2", "2_2", "3_2", "4_2", "1_3", "3_3", "2_4"]);
  addAlphabetData("ㅎ", 4, 5, ["2_1", "1_2", "2_2", "3_2", "4_2", "2_3", "3_3", "1_4", "4_4", "2_5", "3_5"]);
  addAlphabetData("ㅎ", 5, 3, ["3_1", "1_2", "2_2", "3_2", "4_2", "5_2", "2_3", "3_3", "4_3"]);
  addAlphabetData("ㅎ", 5, 4, ["3_1", "1_2", "2_2", "3_2", "4_2", "5_2", "2_3", "4_3", "3_4"]);
  addAlphabetData("ㅎ", 5, 5, ["3_1", "1_2", "2_2", "3_2", "4_2", "5_2", "2_3", "3_3", "4_3", "1_4", "5_4", "2_5", "3_5", "4_5"]);
  addAlphabetData("ㅎ", 3, 7, ["2_1", "1_2", "2_2", "3_2", "2_3", "1_4", "3_4", "1_5", "3_5", "1_6", "3_6", "2_7"]);
  addAlphabetData("ㅎ", 4, 7, ["2_1", "1_2", "2_2", "3_2", "4_2", "2_3", "3_3", "1_4", "4_4", "1_5", "4_5", "1_6", "4_6", "2_7", "3_7"]);
  addAlphabetData("ㅎ", 5, 7, ["3_1", "1_2", "2_2", "3_2", "4_2", "5_2", "2_3", "3_3", "4_3", "1_4", "5_4", "1_5", "5_5", "1_6", "5_6", "2_7", "3_7", "4_7"]);
  // ㄲ
  addAlphabetData("ㄲ", 4, 3, ["1_1", "2_1", "3_1", "4_1", "2_2", "4_2", "2_3", "4_3"]);
  addAlphabetData("ㄲ", 4, 4, ["1_1", "2_1", "3_1", "4_1", "2_2", "4_2", "2_3", "4_3", "2_4", "4_4"]);
  addAlphabetData("ㄲ", 4, 5, ["1_1", "2_1", "3_1", "4_1", "2_2", "4_2", "2_3", "4_3", "2_4", "4_4", "2_5", "4_5"]);
  addAlphabetData("ㄲ", 5, 3, ["1_1", "2_1", "3_1", "4_1", "5_1", "3_2", "5_2", "3_3", "5_3"]);
  addAlphabetData("ㄲ", 5, 4, ["1_1", "2_1", "3_1", "4_1", "5_1", "3_2", "5_2", "3_3", "5_3", "3_4", "5_4"]);
  addAlphabetData("ㄲ", 5, 5, ["1_1", "2_1", "3_1", "4_1", "5_1", "3_2", "5_2", "3_3", "5_3", "3_4", "5_4", "3_5", "5_5"]);
  addAlphabetData("ㄲ", 4, 7, ["1_1", "2_1", "3_1", "4_1", "2_2", "4_2", "2_3", "4_3", "2_4", "4_4", "2_5", "4_5", "2_6", "4_6", "2_7", "4_7"]);
  addAlphabetData("ㄲ", 5, 7, ["1_1", "2_1", "3_1", "4_1", "5_1", "3_2", "5_2", "3_3", "5_3", "3_4", "5_4", "3_5", "5_5", "3_6", "5_6", "3_7", "5_7"]);
  // ㄸ
  addAlphabetData("ㄸ", 4, 3, ["1_1", "2_1", "3_1", "4_1", "1_2", "3_2", "1_3", "2_3", "3_3", "4_3"]);
  addAlphabetData("ㄸ", 4, 4, ["1_1", "2_1", "3_1", "4_1", "1_2", "3_2", "1_3", "3_3", "1_4", "2_4", "3_4", "4_4"]);
  addAlphabetData("ㄸ", 4, 5, ["1_1", "2_1", "3_1", "4_1", "1_2", "3_2", "1_3", "3_3", "1_4", "3_4", "1_5", "2_5", "3_5", "4_5"]);
  addAlphabetData("ㄸ", 5, 3, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "3_2", "1_3", "3_3", "1_4", "2_4", "3_4", "4_4", "5_4"]);
  addAlphabetData("ㄸ", 5, 4, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "3_2", "1_3", "3_3", "1_4", "2_4", "3_4", "4_4", "5_4"]);
  addAlphabetData("ㄸ", 5, 5, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "3_2", "1_3", "3_3", "1_4", "3_4", "1_5", "2_5", "3_5", "4_5", "5_5"]);
  addAlphabetData("ㄸ", 4, 7, ["1_1", "2_1", "3_1", "4_1", "1_2", "3_2", "1_3", "3_3", "1_4", "3_4", "1_5", "3_5", "1_6", "3_6", "1_7", "2_7", "3_7", "4_7"]);
  addAlphabetData("ㄸ", 5, 7, ["1_1", "2_1", "3_1", "4_1", "5_1", "1_2", "3_2", "1_3", "3_3", "1_4", "3_4", "1_5", "3_5", "1_6", "3_6", "1_7", "2_7", "3_7", "4_7", "5_7"]);
  // ㅃ
  addAlphabetData("ㅃ", 4, 3, ["1_1", "3_1", "1_2", "2_2", "3_2", "1_3", "2_3", "3_3", "1_4", "2_4", "3_4"]);
  addAlphabetData("ㅃ", 4, 4, ["1_1", "3_1", "4_1", "1_2", "2_2", "3_2", "4_2", "1_3", "2_3", "3_3", "4_3", "1_4", "2_4", "3_4", "4_4"]);
  addAlphabetData("ㅃ", 4, 5, ["1_1", "3_1", "4_1", "1_2", "2_2", "3_2", "4_2", "1_3", "2_3", "3_3", "4_3", "1_4", "2_4", "3_4", "4_4", "1_5", "2_5", "3_5", "4_5"]);
  addAlphabetData("ㅃ", 5, 3, ["1_1", "3_1", "5_1", "1_2", "2_2", "3_2", "4_2", "5_2", "1_3", "2_3", "3_3", "4_3", "5_3"]);
  addAlphabetData("ㅃ", 5, 4, ["1_1", "3_1", "5_1", "1_2", "2_2", "3_2", "4_2", "5_2", "1_3", "3_3", "5_3", "1_4", "2_4", "3_4", "4_4", "5_4"]);
  addAlphabetData("ㅃ", 5, 5, ["1_1", "3_1", "5_1", "1_2", "3_2", "5_2", "1_3", "2_3", "3_3", "4_3", "5_3", "1_4", "3_4", "5_4", "1_5", "2_5", "3_5", "4_5", "5_5"]);
  addAlphabetData("ㅃ", 4, 7, ["1_1", "3_1", "4_1", "1_2", "3_2", "4_2", "1_3", "2_3", "3_3", "4_3", "1_4", "2_4", "3_4", "4_4", "1_5", "2_5", "3_5", "4_5", "1_6", "2_6", "3_6", "4_6", "1_7", "2_7", "3_7", "4_7"]);
  addAlphabetData("ㅃ", 5, 7, ["1_1", "3_1", "5_1", "1_2", "3_2", "5_2", "1_3", "2_3", "3_3", "4_3", "5_3", "1_4", "3_4", "5_4", "1_5", "3_5", "5_5", "1_6", "3_6", "5_6", "1_7", "2_7", "3_7", "4_7", "5_7"]);
  // ㅆ
  addAlphabetData("ㅆ", 4, 3, ["1_1", "3_1", "1_2", "2_2", "3_2", "4_2", "1_3", "3_3", "4_3"]);
  addAlphabetData("ㅆ", 4, 4, ["1_1", "3_1", "1_2", "2_2", "3_2", "1_3", "2_3", "3_3", "4_3", "1_4", "3_4", "4_4"]);
  addAlphabetData("ㅆ", 4, 5, ["1_1", "3_1", "1_2", "2_2", "3_2", "1_3", "2_3", "3_3", "4_3", "1_4", "2_4", "3_4", "4_4", "1_5", "3_5", "4_5"]);
  addAlphabetData("ㅆ", 5, 3, ["1_1", "3_1", "1_2", "2_2", "3_2", "4_2", "1_3", "3_3", "5_3"]);
  addAlphabetData("ㅆ", 5, 4, ["1_1", "3_1", "1_2", "2_2", "3_2", "4_2", "1_3", "3_3", "5_3", "1_4", "3_4", "5_4"]);
  addAlphabetData("ㅆ", 5, 5, ["1_1", "3_1", "1_2", "2_2", "3_2", "4_2", "1_3", "2_3", "3_3", "4_3", "1_4", "3_4", "5_4", "1_5", "3_5", "5_5"]);
  addAlphabetData("ㅆ", 4, 7, ["1_1", "3_1", "1_2", "3_2", "1_3", "2_3", "3_3", "1_4", "2_4", "3_4", "1_5", "2_5", "3_5", "4_5", "1_6", "3_6", "4_6", "1_7", "3_7", "4_7"]);
  addAlphabetData("ㅆ", 5, 7, ["1_1", "3_1", "1_2", "3_2", "1_3", "2_3", "3_3", "4_3", "1_4", "2_4", "3_4", "4_4", "1_5", "3_5", "5_5", "1_6", "3_6", "5_6", "1_7", "3_7", "5_7"]);
  // ㅉ
  addAlphabetData("ㅉ", 4, 3, ["1_1", "2_1", "3_1", "4_1", "2_2", "3_2", "1_3", "2_3", "4_3"]);
  addAlphabetData("ㅉ", 4, 4, ["1_1", "2_1", "3_1", "4_1", "2_2", "3_2", "1_3", "2_3", "3_3", "4_3", "1_4", "3_4", "4_4"]);
  addAlphabetData("ㅉ", 4, 5, ["1_1", "2_1", "3_1", "4_1", "2_2", "3_2", "1_3", "2_3", "3_3", "4_3", "1_4", "2_4", "3_4", "4_4", "1_5", "3_5", "4_5"]);
  addAlphabetData("ㅉ", 5, 3, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "4_2", "1_3", "3_3", "5_3"]);
  addAlphabetData("ㅉ", 5, 4, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "4_2", "1_3", "3_3", "5_3", "1_4", "3_4", "5_4"]);
  addAlphabetData("ㅉ", 5, 5, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "4_2", "2_3", "4_3", "1_4", "3_4", "5_4", "1_5", "3_5", "5_5"]);
  addAlphabetData("ㅉ", 4, 7, ["1_1", "2_1", "3_1", "4_1", "2_2", "3_2", "2_3", "3_3", "2_4", "3_4", "1_5", "2_5", "3_5", "4_5", "1_6", "3_6", "4_6", "1_7", "3_7", "4_7"]);
  addAlphabetData("ㅉ", 5, 7, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "4_2", "2_3", "4_3", "2_4", "4_4", "1_5", "3_5", "5_5", "1_6", "3_6", "5_6", "1_7", "3_7", "5_7"]);
  // ㅣ
  addAlphabetData("ㅣ", 1, 3, ["1_1", "1_2", "1_3"]);
  addAlphabetData("ㅣ", 1, 4, ["1_1", "1_2", "1_3", "1_4"]);
  addAlphabetData("ㅣ", 1, 5, ["1_1", "1_2", "1_3", "1_4", "1_5"]);
  addAlphabetData("ㅣ", 1, 6, ["1_1", "1_2", "1_3", "1_4", "1_5", "1_6"]);
  addAlphabetData("ㅣ", 1, 7, ["1_1", "1_2", "1_3", "1_4", "1_5", "1_6", "1_7"]);
  // ㅡ
  addAlphabetData("ㅡ", 3, 1, ["1_1", "2_1", "3_1"]);
  addAlphabetData("ㅡ", 4, 1, ["1_1", "2_1", "3_1", "4_1"]);
  addAlphabetData("ㅡ", 5, 1, ["1_1", "2_1", "3_1", "4_1", "5_1"]);
  addAlphabetData("ㅡ", 6, 1, ["1_1", "2_1", "3_1", "4_1", "5_1", "6_1"]);
  addAlphabetData("ㅡ", 7, 1, ["1_1", "2_1", "3_1", "4_1", "5_1", "6_1", "7_1"]);
  // ㅏ
  addAlphabetData("ㅏ", 2, 3, ["1_1", "1_2", "2_2", "1_3"]);
  addAlphabetData("ㅏ", 2, 4, ["1_1", "1_2", "2_2", "1_3", "1_4"]);
  addAlphabetData("ㅏ", 2, 5, ["1_1", "1_2", "1_3", "2_3", "1_4", "1_5"]);
  addAlphabetData("ㅏ", 2, 6, ["1_1", "1_2", "1_3", "2_3", "1_4", "1_5", "1_6"]);
  addAlphabetData("ㅏ", 2, 7, ["1_1", "1_2", "1_3", "1_4", "2_4", "1_5", "1_6", "1_7"]);
  // ㅑ
  addAlphabetData("ㅑ", 2, 3, ["1_1", "2_1", "1_2", "2_2", "1_3"]);
  addAlphabetData("ㅑ", 2, 4, ["1_1", "1_2", "2_2", "1_3", "2_3", "1_4"]);
  addAlphabetData("ㅑ", 2, 5, ["1_1", "1_2", "2_2", "1_3", "1_4", "2_4", "1_5"]);
  addAlphabetData("ㅑ", 2, 6, ["1_1", "1_2", "2_2", "1_3", "1_4", "2_4", "1_5", "1_6"]);
  addAlphabetData("ㅑ", 2, 7, ["1_1", "1_2", "1_3", "2_3", "1_4", "1_5", "2_5", "1_6", "1_7"]);
  // ㅓ
  addAlphabetData("ㅓ", 2, 3, ["2_1", "1_2", "2_2", "2_3"]);
  addAlphabetData("ㅓ", 2, 4, ["2_1", "1_2", "2_2", "2_3", "2_4"]);
  addAlphabetData("ㅓ", 2, 5, ["2_1", "2_2", "1_3", "2_3", "2_4", "2_5"]);
  addAlphabetData("ㅓ", 2, 6, ["2_1", "2_2", "1_3", "2_3", "2_4", "2_5", "2_6"]);
  addAlphabetData("ㅓ", 2, 7, ["2_1", "2_2", "2_3", "1_4", "2_4", "2_5", "2_6", "2_7"]);
  // ㅕ
  addAlphabetData("ㅕ", 2, 3, ["1_1", "2_1", "1_2", "2_2", "2_3"]);
  addAlphabetData("ㅕ", 2, 4, ["1_1", "2_1", "2_2", "1_3", "2_3", "2_4"]);
  addAlphabetData("ㅕ", 2, 5, ["2_1", "1_2", "2_2", "2_3", "1_4", "2_4", "2_5"]);
  addAlphabetData("ㅕ", 2, 6, ["2_1", "1_2", "2_2", "2_3", "1_4", "2_4", "2_5", "2_6"]);
  addAlphabetData("ㅕ", 2, 7, ["2_1", "2_2", "1_3", "2_3", "2_4", "1_5", "2_5", "2_6", "2_7"]);
  // ㅗ
  addAlphabetData("ㅗ", 3, 2, ["2_1", "1_2", "2_2", "3_2"]);
  addAlphabetData("ㅗ", 4, 2, ["2_1", "1_2", "2_2", "3_2", "4_2"]);
  addAlphabetData("ㅗ", 5, 2, ["3_1", "1_2", "2_2", "3_2", "4_2", "5_2"]);
  addAlphabetData("ㅗ", 6, 2, ["3_1", "1_2", "2_2", "3_2", "4_2", "5_2", "6_2"]);
  addAlphabetData("ㅗ", 7, 2, ["4_1", "1_2", "2_2", "3_2", "4_2", "5_2", "6_2", "7_2"]);
  // ㅛ
  addAlphabetData("ㅛ", 3, 2, ["2_1", "3_1", "1_2", "2_2", "3_2"]);
  addAlphabetData("ㅛ", 4, 2, ["1_1", "3_1", "1_2", "2_2", "3_2", "4_2"]);
  addAlphabetData("ㅛ", 5, 2, ["2_1", "4_1", "1_2", "2_2", "3_2", "4_2", "5_2"]);
  addAlphabetData("ㅛ", 6, 2, ["2_1", "4_1", "1_2", "2_2", "3_2", "4_2", "5_2", "6_2"]);
  addAlphabetData("ㅛ", 7, 2, ["3_1", "5_1", "1_2", "2_2", "3_2", "4_2", "5_2", "6_2", "7_2"]);
  // ㅜ
  addAlphabetData("ㅜ", 3, 2, ["1_1", "2_1", "3_1", "2_2"]);
  addAlphabetData("ㅜ", 4, 2, ["1_1", "2_1", "3_1", "4_1", "2_2"]);
  addAlphabetData("ㅜ", 5, 2, ["1_1", "2_1", "3_1", "4_1", "5_1", "3_2"]);
  addAlphabetData("ㅜ", 6, 2, ["1_1", "2_1", "3_1", "4_1", "5_1", "6_1", "3_2"]);
  addAlphabetData("ㅜ", 7, 2, ["1_1", "2_1", "3_1", "4_1", "5_1", "6_1", "7_1", "4_2"]);
  // ㅠ
  addAlphabetData("ㅠ", 3, 2, ["1_1", "2_1", "3_1", "1_2", "2_2"]);
  addAlphabetData("ㅠ", 4, 2, ["1_1", "2_1", "3_1", "4_1", "1_2", "3_2"]);
  addAlphabetData("ㅠ", 5, 2, ["1_1", "2_1", "3_1", "4_1", "5_1", "2_2", "4_2"]);
  addAlphabetData("ㅠ", 6, 2, ["1_1", "2_1", "3_1", "4_1", "5_1", "6_1", "2_2", "4_2"]);
  addAlphabetData("ㅠ", 7, 2, ["1_1", "2_1", "3_1", "4_1", "5_1", "6_1", "7_1", "3_2", "5_2"]);
  // ㅔ
  addAlphabetData("ㅔ", 3, 3, ["2_1", "3_1", "1_2", "2_2", "3_2", "2_3", "3_3"]);
  addAlphabetData("ㅔ", 3, 4, ["2_1", "3_1", "1_2", "2_2", "3_2", "2_3", "3_3", "2_4", "3_4"]);
  addAlphabetData("ㅔ", 3, 5, ["2_1", "3_1", "2_2", "3_2", "1_3", "2_3", "3_3", "2_4", "3_4", "2_5", "3_5"]);
  addAlphabetData("ㅔ", 3, 6, ["2_1", "3_1", "2_2", "3_2", "1_3", "2_3", "3_3", "2_4", "3_4", "2_5", "3_5", "2_6", "3_6"]);
  addAlphabetData("ㅔ", 3, 7, ["2_1", "3_1", "2_2", "3_2", "1_3", "2_3", "3_3", "2_4", "3_4", "2_5", "3_5", "2_6", "3_6", "2_7", "3_7"]);
  addAlphabetData("ㅔ", 4, 3, ["2_1", "4_1", "1_2", "2_2", "4_2", "2_3", "4_3"]);
  addAlphabetData("ㅔ", 4, 4, ["2_1", "4_1", "1_2", "2_2", "4_2", "2_3", "4_3", "2_4", "4_4"]);
  addAlphabetData("ㅔ", 4, 5, ["2_1", "4_1", "2_2", "4_2", "1_3", "2_3", "4_3", "2_4", "4_4", "2_5", "4_5"]);
  addAlphabetData("ㅔ", 4, 6, ["2_1", "4_1", "2_2", "4_2", "1_3", "2_3", "4_3", "2_4", "4_4", "2_5", "4_5", "2_6", "4_6"]);
  addAlphabetData("ㅔ", 4, 7, ["2_1", "4_1", "2_2", "4_2", "2_3", "4_3", "1_4", "2_4", "4_4", "2_5", "4_5", "2_6", "4_6", "2_7", "4_7"]);
  // ㅖ
  addAlphabetData("ㅖ", 3, 3, ["1_1", "2_1", "3_1", "1_2", "2_2", "3_2", "2_3", "3_3"]);
  addAlphabetData("ㅖ", 3, 4, ["1_1", "2_1", "3_1", "2_2", "3_2", "1_3", "2_3", "3_3", "2_4", "3_4"]);
  addAlphabetData("ㅖ", 3, 5, ["2_1", "3_1", "1_2", "2_2", "3_2", "2_3", "3_3", "1_4", "2_4", "3_4", "2_5", "3_5"]);
  addAlphabetData("ㅖ", 3, 6, ["2_1", "3_1", "1_2", "2_2", "3_2", "2_3", "3_3", "1_4", "2_4", "3_4", "2_5", "3_5", "2_6", "3_6"]);
  addAlphabetData("ㅖ", 3, 7, ["2_1", "3_1", "2_2", "3_2", "1_3", "2_3", "3_3", "2_4", "3_4", "1_5", "2_5", "3_5", "2_6", "3_6", "2_7", "3_7"]);
  addAlphabetData("ㅖ", 4, 3, ["1_1", "2_1", "4_1", "1_2", "2_2", "4_2", "2_3", "4_3"]);
  addAlphabetData("ㅖ", 4, 4, ["1_1", "2_1", "4_1", "2_2", "4_2", "1_3", "2_3", "4_3", "2_4", "4_4"]);
  addAlphabetData("ㅖ", 4, 5, ["2_1", "4_1", "1_2", "2_2", "4_2", "2_3", "4_3", "1_4", "2_4", "4_4", "2_5", "4_5"]);
  addAlphabetData("ㅖ", 4, 6, ["2_1", "4_1", "1_2", "2_2", "4_2", "2_3", "4_3", "1_4", "2_4", "4_4", "2_5", "4_5", "2_6", "4_6"]);
  addAlphabetData("ㅖ", 4, 7, ["2_1", "4_1", "2_2", "4_2", "1_3", "2_3", "4_3", "2_4", "4_4", "1_5", "2_5", "4_5", "2_6", "4_6", "2_7", "4_7"]);
  // ㅐ
  addAlphabetData("ㅐ", 3, 3, ["1_1", "3_1", "1_2", "2_2", "3_2", "1_3", "3_3"]);
  addAlphabetData("ㅐ", 3, 4, ["1_1", "3_1", "1_2", "2_2", "3_2", "1_3", "3_3", "1_4", "3_4"]);
  addAlphabetData("ㅐ", 3, 5, ["1_1", "3_1", "1_2", "3_2", "1_3", "2_3", "3_3", "1_4", "3_4", "1_5", "3_5"]);
  addAlphabetData("ㅐ", 3, 6, ["1_1", "3_1", "1_2", "3_2", "1_3", "2_3", "3_3", "1_4", "3_4", "1_5", "3_5", "1_6", "3_6"]);
  addAlphabetData("ㅐ", 3, 7, ["1_1", "3_1", "1_2", "3_2", "1_3", "3_3", "1_4", "2_4", "3_4", "1_5", "3_5", "1_6", "3_6", "1_7", "3_7"]);
  // ㅒ
  addAlphabetData("ㅒ", 3, 3, ["1_1", "2_1", "3_1", "1_2", "2_2", "3_2", "1_3", "3_3"]);
  addAlphabetData("ㅒ", 3, 4, ["1_1", "3_1", "1_2", "2_2", "3_2", "1_3", "2_3", "3_3", "1_4", "3_4"]);
  addAlphabetData("ㅒ", 3, 5, ["1_1", "3_1", "1_2", "2_2", "3_2", "1_3", "3_3", "1_4", "2_4", "3_4", "1_5", "3_5"]);
  addAlphabetData("ㅒ", 3, 6, ["1_1", "3_1", "1_2", "2_2", "3_2", "1_3", "3_3", "1_4", "2_4", "3_4", "1_5", "3_5", "1_6", "3_6"]);
  addAlphabetData("ㅒ", 3, 7, ["1_1", "3_1", "1_2", "3_2", "1_3", "2_3", "3_3", "1_4", "3_4", "1_5", "2_5", "3_5", "1_6", "3_6", "1_7", "3_7"]);
})();

// Kor Alphabets
(() => {
  addDatas(["c2", "c3", "c5"], 0, 1, 1, 5, 5);
  addDatas(["c2c3", "c3c2", "c3c3"], 0, 1, 1, 3, 5);
  addDatas(["c2c3", "c3c2", "c3c3"], 1, 4, 1, 4, 5);
  addDatas(["v1"], 0, 1, 1, 1, 5);
  addDatas(["v2"], 0, 1, 1, 2, 5);
  addDatas(["v3"], 0, 1, 1, 4, 5);
  addDatas(["v3"], 0, 1, 1, 3, 5);
  addDatas(["h1"], 0, 1, 1, 5, 1);
  addDatas(["h2"], 0, 1, 1, 5, 2);
})();

// "c?v?": "c2v1", "c3v1", "c5v1", "c2v2", "c3v2", "c5v2", "c2v3", "c3v3", "c5v3"
(() => {
  addDatas(["c2v1", "c3v1"], 0, 0, 0, 4, 7);
  addDatas(["c2v1", "c3v1"], 1, 5, 0, 1, 7);
  addDatas(["c5v1"], 0, 0, 0, 5, 7);
  addDatas(["c5v1"], 1, 6, 0, 1, 7);

  addDatas(["c2v2", "c3v2"], 0, 0, 0, 4, 7);
  addDatas(["c2v2", "c3v2"], 1, 5, 0, 2, 7);
  addDatas(["c5v2"], 0, 0, 0, 5, 7);
  addDatas(["c5v2"], 1, 5, 0, 2, 7);

  addDatas(["c2v3", "c3v3"], 0, 0, 0, 3, 7);
  addDatas(["c2v3", "c3v3"], 1, 3, 0, 4, 7);
  addDatas(["c2v3", "c3v3"], 1, 4, 0, 3, 7);
  addDatas(["c5v3"], 0, 0, 0, 4, 7);
  addDatas(["c5v3"], 1, 4, 0, 3, 7);
})();

// "c?h?": "c2h1", "c3h1", "c5h1", "c2h2", "c3h2", "c5h2"
(() => {
  addDatas(["c2h1", "c3h1", "c5h1"], 0, 1, 0, 5, 4);
  addDatas(["c2h1", "c3h1", "c5h1"], 1, 0, 5, 7, 1);

  addDatas(["c2h2", "c3h2", "c5h2"], 0, 1, 0, 5, 4);
  addDatas(["c2h2", "c3h2", "c5h2"], 1, 0, 5, 7, 2);
})();

// "c?h?v?": "c2h1v1", "c2h2v1", "c2h2v2", "c2h2v3", "c3h1v1", "c3h2v1", "c3h2v2", "c3h2v3", "c5h1v1", "c5h2v1", "c5h2v2", "c5h2v3"
(() => {
  addDatas(["c2h1v1", "c3h1v1", "c5h1v1"], 0, 0, 0, 5, 5);
  addDatas(["c2h1v1", "c3h1v1", "c5h1v1"], 1, 0, 6, 6, 1);
  addDatas(["c2h1v1", "c3h1v1", "c5h1v1"], 2, 6, 0, 1, 7);

  addDatas(["c2h2v1", "c3h2v1", "c5h2v1"], 0, 0, 0, 5, 4);
  addDatas(["c2h2v1", "c3h2v1", "c5h2v1"], 1, 0, 5, 6, 2);
  addDatas(["c2h2v1", "c3h2v1", "c5h2v1"], 2, 6, 0, 1, 7);

  addDatas(["c2h2v2", "c3h2v2", "c5h2v2"], 0, 0, 0, 4, 4);
  addDatas(["c2h2v2", "c3h2v2", "c5h2v2"], 1, 0, 5, 6, 2);
  addDatas(["c2h2v2", "c3h2v2", "c5h2v2"], 2, 5, 0, 2, 7);

  addDatas(["c2h2v3", "c3h2v3"], 0, 0, 0, 3, 4);
  addDatas(["c5h2v3"], 0, 0, 0, 4, 4);
  addDatas(["c2h2v3", "c3h2v3", "c5h2v3"], 1, 0, 5, 6, 2);
  addDatas(["c2h2v3", "c3h2v3", "c5h2v3"], 2, 4, 0, 3, 7);
})();

// "c2v?c?", "c2v?c?c?": "c2v1c2", "c2v1c3", "c2v1c5", "c2v1c2c3", "c2v1c3c2", "c2v1c3c3", "c2v2c2", "c2v2c3", "c2v2c5", "c2v2c2c3", "c2v2c3c2", "c2v2c3c3", "c2v3c2", "c2v3c3", "c2v3c5", "c2v3c2c3", "c2v3c3c2", "c2v3c3c3"
(() => {
  addDatas(["c2v1c2", "c2v2c2", "c2v3c2", "c2v3c2c3", "c2v3c3c2", "c2v3c3c3"], 0, 0, 0, 3, 3);
  addDatas(
    [
      "c2v1c3", "c2v2c3", "c2v3c3", "c2v1c5", "c2v2c5", "c2v3c5",
      "c2v1c2c3", "c2v1c3c2", "c2v1c3c3", "c2v2c2c3", "c2v2c3c2", "c2v2c3c3"
    ],
    0, 0, 0, 3, 2
  );

  addDatas(["c2v1c2"], 1, 5, 0, 1, 4);
  addDatas(["c2v1c3", "c2v1c5", "c2v1c2c3", "c2v1c3c2", "c2v1c3c3"], 1, 5, 0, 1, 3)
  addDatas(["c2v2c2"], 1, 4, 0, 2, 4);
  addDatas(["c2v2c3", "c2v2c5", "c2v2c2c3", "c2v2c3c2", "c2v2c3c3"], 1, 4, 0, 2, 3);
  addDatas(["c2v3c2"], 1, 3, 0, 3, 4);
  addDatas(["c2v3c3", "c2v3c5", "c2v3c2c3", "c2v3c3c2", "c2v3c3c3"], 1, 4, 0, 3, 3);

  addDatas(["c2v1c2", "c2v2c2", "c2v3c2"], 2, 1, 4, 4, 3);
  addDatas(["c2v1c3", "c2v2c3", "c2v3c3"], 2, 1, 3, 4, 4);
  addDatas(["c2v1c5", "c2v2c5", "c2v3c5"], 2, 1, 3, 4, 4);
  addDatas(
    ["c2v1c2c3", "c2v1c3c2", "c2v1c3c3", "c2v2c2c3", "c2v2c3c2", "c2v2c3c3", "c2v3c2c3", "c2v3c3c2", "c2v3c3c3"],
    2, 0, 3, 3, 4
  );
  addDatas(
    ["c2v1c2c3", "c2v1c3c2", "c2v1c3c3", "c2v2c2c3", "c2v2c3c2", "c2v2c3c3", "c2v3c2c3", "c2v3c3c2", "c2v3c3c3"],
    3, 3, 3, 3, 4
  );
})();

// "c3v?c?", "c3v?c?c?": "c3v1c2", "c3v1c3", "c3v1c5", "c3v1c2c3", "c3v1c3c2", "c3v1c3c3", "c3v2c2", "c3v2c3", "c3v2c5", "c3v2c2c3", "c3v2c3c2", "c3v2c3c3", "c3v3c2", "c3v3c3", "c3v3c5", "c3v3c2c3", "c3v3c3c2", "c3v3c3c3"
(() => {
  addDatas(["c3v1c2", "c3v2c2", "c3v3c2", "c3v3c2c3", "c3v3c3c2", "c3v3c3c3"], 0, 0, 0, 4, 4);
  addDatas(
    [
      "c3v1c3", "c3v2c3", "c3v3c3", "c3v1c5", "c3v2c5", "c3v3c5",
      "c3v1c2c3", "c3v1c3c2", "c3v1c3c3", "c3v2c2c3", "c3v2c3c2", "c3v2c3c3"
    ],
    0, 0, 0, 3, 3
  );

  addDatas(["c3v1c2"], 1, 6, 0, 1, 4);
  addDatas(["c3v1c3", "c3v1c5", "c3v1c2c3", "c3v1c3c2", "c3v1c3c3"], 1, 5, 0, 1, 3)
  addDatas(["c3v2c2"], 1, 5, 0, 2, 4);
  addDatas(["c3v2c3", "c3v2c5", "c3v2c2c3", "c3v2c3c2", "c3v2c3c3"], 1, 4, 0, 2, 3);
  addDatas(["c3v3c2"], 1, 4, 0, 3, 4);
  addDatas(["c3v3c3", "c3v3c5", "c3v3c2c3", "c3v3c3c2", "c3v3c3c3"], 1, 4, 0, 3, 3);

  addDatas(["c3v1c2", "c3v2c2", "c3v3c2"], 2, 1, 4, 4, 3);
  addDatas(["c3v1c3", "c3v2c3", "c3v3c3"], 2, 1, 3, 4, 4);
  addDatas(["c3v1c5", "c3v2c5", "c3v3c5"], 2, 1, 4, 5, 3);
  addDatas(
    ["c3v1c2c3", "c3v1c3c2", "c3v1c3c3", "c3v2c2c3", "c3v2c3c2", "c3v2c3c3", "c3v3c2c3", "c3v3c3c2", "c3v3c3c3"],
    2, 0, 3, 3, 4
  );
  addDatas(
    ["c3v1c2c3", "c3v1c3c2", "c3v1c3c3", "c3v2c2c3", "c3v2c3c2", "c3v2c3c3", "c3v3c2c3", "c3v3c3c2", "c3v3c3c3"],
    3, 3, 3, 3, 4
  );
})();

// "c5v?c?", "c5v?c?c?": "c5v1c2", "c5v1c3", "c5v1c5", "c5v1c2c3", "c5v1c3c2", "c5v1c3c3", "c5v2c2", "c5v2c3", "c5v2c5", "c5v2c2c3", "c5v2c3c2", "c5v2c3c3", "c5v3c2", "c5v3c3", "c5v3c5", "c5v3c2c3", "c5v3c3c2", "c5v3c3c3"
(() => {
  addDatas(["c5v1c2", "c5v2c2", "c5v3c2"], 0, 0, 0, 4, 4);
  addDatas(
    [
      "c5v1c3", "c5v2c3", "c5v3c3", "c5v1c5", "c5v2c5", "c5v3c5",
      "c5v1c2c3", "c5v1c3c2", "c5v1c3c3", "c5v2c2c3", "c5v2c3c2", "c5v2c3c3", "c5v3c3c2", "c5v3c2c3", "c5v3c3c3"
    ],
    0, 0, 0, 4, 3
  );

  addDatas(["c5v1c2"], 1, 6, 0, 1, 4);
  addDatas(["c5v1c3", "c5v1c5", "c5v1c2c3", "c5v1c3c2", "c5v1c3c3"], 1, 5, 0, 1, 3)
  addDatas(["c5v2c2"], 1, 5, 0, 2, 4);
  addDatas(["c5v2c3", "c5v2c5", "c5v2c2c3", "c5v2c3c2", "c5v2c3c3"], 1, 5, 0, 2, 3);
  addDatas(["c5v3c2"], 1, 4, 0, 3, 4);
  addDatas(["c5v3c3", "c5v3c5", "c5v3c2c3", "c5v3c3c2", "c5v3c3c3"], 1, 4, 0, 3, 3);

  addDatas(["c5v1c2", "c5v2c2", "c5v3c2"], 2, 1, 4, 4, 3);
  addDatas(["c5v1c3", "c5v2c3", "c5v3c3"], 2, 1, 3, 4, 4);
  addDatas(["c5v1c5", "c5v2c5", "c5v3c5"], 2, 1, 3, 4, 4);
  addDatas(
    ["c5v1c2c3", "c5v1c3c2", "c5v1c3c3", "c5v2c2c3", "c5v2c3c2", "c5v2c3c3", "c5v3c2c3", "c5v3c3c2", "c5v3c3c3"],
    2, 0, 4, 3, 3
  );
  addDatas(
    ["c5v1c2c3", "c5v1c3c2", "c5v1c3c3", "c5v2c2c3", "c5v2c3c2", "c5v2c3c3", "c5v3c2c3", "c5v3c3c2", "c5v3c3c3"],
    3, 3, 4, 3, 3
  );
})();

// "c2h?c?", "c2h?c?c?": "c2h1c2", "c2h1c3", "c2h1c5", "c2h1c2c3", "c2h1c3c2", "c2h1c3c3", "c2h2c2", "c2h2c5", "c2h2c3", "c2h2c2c3", "c2h2c3c2", "c2h2c3c3"
(() => {
  addDatas(["c2h1c2", "c2h2c2"], 0, 1, 0, 5, 3);
  addDatas(
    [
      "c2h1c3", "c2h2c3", "c2h1c5", "c2h2c5",
      "c2h1c2c3", "c2h1c3c2", "c2h1c3c3", "c2h2c2c3", "c2h2c3c2", "c2h2c3c3"
    ],
    0, 1, 0, 5, 2
  );

  addDatas(["c2h1c2"], 1, 0, 3, 7, 1);
  addDatas(["c2h2c2"], 1, 0, 2, 7, 2);
  addDatas(["c2h1c3", "c2h1c5", "c2h1c2c3", "c2h1c3c2", "c2h1c3c3"], 1, 0, 2, 7, 1);
  addDatas(["c2h2c2", "c2h1c2c3", "c2h2c3", "c2h2c2c3", "c2h2c3c2", "c2h2c3c3"], 1, 0, 2, 7, 2);

  addDatas(["c2h1c2", "c2h2c2"], 2, 1, 4, 5, 3);
  addDatas(["c2h1c3", "c2h2c3"], 2, 1, 4, 5, 3);
  addDatas(["c2h1c5", "c2h2c5"], 2, 1, 4, 5, 3);
  addDatas(
    ["c2h1c2c3", "c2h1c3c2", "c2h1c3c3", "c2h2c2c3", "c2h2c3c2", "c2h2c3c3"],
    2, 0, 4, 3, 3
  );
  addDatas(
    ["c2h1c2c3", "c2h1c3c2", "c2h1c3c3", "c2h2c2c3", "c2h2c3c2", "c2h2c3c3"],
    3, 3, 4, 3, 3
  );
})();

// "c3h?c?", "c3h?c?c?": "c3h1c2", "c3h1c3", "c3h1c5", "c3h1c2c3", "c3h1c3c2", "c3h1c3c3", "c3h2c2", "c3h2c3", "c3h2c5", "c3h2c2c3", "c3h2c3c2", "c3h2c3c3"
(() => {
  addDatas(
    [
      "c3h1c2", "c3h2c2", "c3h1c3", "c3h2c3", "c3h1c5", "c3h2c5",
      "c3h1c2c3", "c3h1c3c2", "c3h1c3c3", "c3h2c2c3", "c3h2c3c2", "c3h2c3c3"
    ],
    0, 1, 0, 3, 3
  );

  addDatas(["c3h1c2", "c3h1c3", "c3h1c5", "c3h1c2c3", "c3h1c3c2", "c3h1c3c3"], 1, 4, 2, 3, 1);
  addDatas(["c3h2c2", "c3h2c2", "c3h1c2c3", "c3h2c3", "c3h2c2c3", "c3h2c3c2", "c3h2c3c3"], 1, 4, 2, 3, 2);

  addDatas(["c3h1c2", "c3h2c2"], 2, 1, 4, 5, 3);
  addDatas(["c3h1c3", "c3h2c3"], 2, 1, 4, 5, 3);
  addDatas(["c3h1c5", "c3h2c5"], 2, 1, 4, 5, 3);
  addDatas(
    ["c3h1c2c3", "c3h1c3c2", "c3h1c3c3", "c3h2c2c3", "c3h2c3c2", "c3h2c3c3"],
    2, 0, 4, 3, 3
  );
  addDatas(
    ["c3h1c2c3", "c3h1c3c2", "c3h1c3c3", "c3h2c2c3", "c3h2c3c2", "c3h2c3c3"],
    3, 3, 4, 3, 3
  );
})();

// "c5h?c?", "c5h?c?c?": "c5h1c2", "c5h1c3", "c5h1c2c3", "c5h1c3c2", "c5h1c3c3", "c5h2c2", "c5h2c3", "c5h2c2c3", "c5h2c3c2", "c5h2c3c3"
(() => {
  addDatas(
    [
      "c5h1c2", "c5h2c2", "c5h1c3", "c5h2c3", "c5h1c5", "c5h2c5",
      "c5h1c2c3", "c5h1c3c2", "c5h1c3c3", "c5h2c2c3", "c5h2c3c2", "c5h2c3c3"
    ],
    0, 1, 0, 4, 3
  );

  addDatas(["c5h1c2", "c5h1c3", "c5h1c5", "c5h1c2c3", "c5h1c3c2", "c5h1c3c3"], 1, 4, 2, 3, 1);
  addDatas(["c5h2c2", "c5h2c2", "c5h1c2c3", "c5h2c3", "c5h2c2c3", "c5h2c3c2", "c5h2c3c3"], 1, 4, 2, 3, 2);

  addDatas(["c5h1c2", "c5h2c2"], 2, 1, 4, 5, 3);
  addDatas(["c5h1c3", "c5h2c3"], 2, 1, 4, 5, 3);
  addDatas(["c5h1c5", "c5h2c5"], 2, 1, 4, 5, 3);
  addDatas(
    ["c5h1c2c3", "c5h1c3c2", "c5h1c3c3", "c5h2c2c3", "c5h2c3c2", "c5h2c3c3"],
    2, 0, 4, 3, 3
  );
  addDatas(
    ["c5h1c2c3", "c5h1c3c2", "c5h1c3c3", "c5h2c2c3", "c5h2c3c2", "c5h2c3c3"],
    3, 3, 4, 3, 3
  );
})();

console.log(data);
export default data;
